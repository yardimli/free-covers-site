!(function (e) {
  e.fn.niceSelect = function (t) {
    function s(t) {
      t.after(
        e("<div></div>")
          .addClass("nice-select")
          .addClass(t.attr("class") || "")
          .addClass(t.attr("disabled") ? "disabled" : "")
          .attr("tabindex", t.attr("disabled") ? null : "0")
          .html('<span class="current"></span><ul class="list"></ul>')
      );
      var s = t.next(),
        n = t.find("option"),
        i = t.find("option:selected");

      // Set initial .current span to match the selected option
      updateCurrentDisplay(s.find(".current"), i);

      n.each(function () {
        var option = e(this),
          display = option.data("display"),
          iconClass = option.data("icon"),
          imgSrc = option.data("img");

        // Create <li> element
        var li = e("<li></li>")
          .attr("data-value", option.val())
          .attr("data-display", display || null)
          .addClass(
            "option" +
              (option.is(":selected") ? " selected" : "") +
              (option.is(":disabled") ? " disabled" : "")
          );

        // Add <i> tag if data-icon exists
        if (iconClass) {
          li.append(e("<i></i>").addClass(iconClass));
        }

        // Add <img> tag if data-img exists
        if (imgSrc) {
          li.append(e("<img>").attr("src", imgSrc).addClass("option-img"));
        }

        // Append the option text
        li.append(option.text());

        // Append <li> to the list
        s.find("ul").append(li);
      });
    }

    // Helper function to update the .current span content
    function updateCurrentDisplay(currentElement, selectedOption) {
      currentElement.empty(); // Clear existing content
      var iconClass = selectedOption.data("icon");
      var imgSrc = selectedOption.data("img");

      // Add <i> tag if data-icon exists
      if (iconClass) {
        currentElement.append(e("<i></i>").addClass(iconClass));
      }

      // Add <img> tag if data-img exists
      if (imgSrc) {
        currentElement.append(
          e("<img>").attr("src", imgSrc).addClass("option-img")
        );
      }

      // Append the option text
      currentElement.append(
        selectedOption.data("display") || selectedOption.text()
      );
    }

    if ("string" == typeof t)
      return (
        "update" == t
          ? this.each(function () {
              var t = e(this),
                n = e(this).next(".nice-select"),
                i = n.hasClass("open");
              n.length && (n.remove(), s(t), i && t.next().trigger("click"));
            })
          : "destroy" == t
          ? (this.each(function () {
              var t = e(this),
                s = e(this).next(".nice-select");
              s.length && (s.remove(), t.css("display", ""));
            }),
            0 == e(".nice-select").length && e(document).off(".nice_select"))
          : console.log('Method "' + t + '" does not exist.'),
        this
      );

    this.hide(),
      this.each(function () {
        var t = e(this);
        t.next().hasClass("nice-select") || s(t);
      }),
      e(document).off(".nice_select"),
      e(document).on("click.nice_select", ".nice-select", function (t) {
        var s = e(this);
        e(".nice-select").not(s).removeClass("open"),
          s.toggleClass("open"),
          s.hasClass("open")
            ? (s.find(".option"),
              s.find(".focus").removeClass("focus"),
              s.find(".selected").addClass("focus"))
            : s.focus();
      }),
      e(document).on("click.nice_select", function (t) {
        0 === e(t.target).closest(".nice-select").length &&
          e(".nice-select").removeClass("open").find(".option");
      }),
      e(document).on(
        "click.nice_select",
        ".nice-select .option:not(.disabled)",
        function (t) {
          var s = e(this),
            n = s.closest(".nice-select");
          n.find(".selected").removeClass("selected"), s.addClass("selected");

          // Update the .current span with selected option's content
          var selectedOption = e("<option>")
            .val(s.data("value"))
            .text(s.text())
            .data("icon", s.find("i").attr("class"))
            .data("img", s.find("img").attr("src"));

          updateCurrentDisplay(n.find(".current"), selectedOption);

          n.prev("select").val(s.data("value")).trigger("change");
        }
      ),
      e(document).on("keydown.nice_select", ".nice-select", function (t) {
        var s = e(this),
          n = e(s.find(".focus") || s.find(".list .option.selected"));
        if (32 == t.keyCode || 13 == t.keyCode)
          return (
            s.hasClass("open") ? n.trigger("click") : s.trigger("click"), !1
          );
        if (40 == t.keyCode) {
          if (s.hasClass("open")) {
            var i = n.nextAll(".option:not(.disabled)").first();
            i.length > 0 &&
              (s.find(".focus").removeClass("focus"), i.addClass("focus"));
          } else s.trigger("click");
          return !1;
        }
        if (38 == t.keyCode) {
          if (s.hasClass("open")) {
            var l = n.prevAll(".option:not(.disabled)").first();
            l.length > 0 &&
              (s.find(".focus").removeClass("focus"), l.addClass("focus"));
          } else s.trigger("click");
          return !1;
        }
        if (27 == t.keyCode) s.hasClass("open") && s.trigger("click");
        else if (9 == t.keyCode && s.hasClass("open")) return !1;
      });

    var n = document.createElement("a").style;
    return (
      (n.cssText = "pointer-events:auto"),
      "auto" !== n.pointerEvents && e("html").addClass("no-csspointerevents"),
      this
    );
  };
})(jQuery);
